var Emitter    = require('events').EventEmitter;
var nopt       = require('nopt');
var path       = require('path');
var fs         = require('fs');
var _          = require('lodash');
var crypto     = require('crypto');
var fileExists = require('../util/file-exists');
var inquirer   = require("inquirer");

var template = require('../util/template');
var help     = require('./help');

var optionTypes = { help: Boolean };
var shorthand   = { 'h': ['--help'] };

/**
 * default generated file name
 * @type {String}
 */
var rndIdsFile = 'rnd_ids.csv';

var generator = function (emitter, noOfIds, options) {
    var rnd = '';
    var data = '';
    var dataArray = [];

    emitter.emit('data', template('action', { name: 'generating', shizzle: noOfIds + ' random ids'}, true));

    for (var i = 0; i < noOfIds; i++) {
        rnd = crypto.randomBytes(6).toString('hex');
        data += rnd + '\n';
        dataArray[i] = rnd;
    }

    emitter.emit('data', template('action', { name: 'finished generating', shizzle: noOfIds + ' random ids'}, true));
    emitter.emit('data', template('action', { name: 'checking for duplicates', shizzle: ''}, true));

    if (dataArray.length !== _.uniq(dataArray).length)
    {
        emitter.emit('warn', 'duplicates found');
    } else {
        emitter.emit('warn', 'NO duplicates found');
    }

    emitter.emit('data', template('action', { name: 'saving to file', shizzle: rndIdsFile}, true));

    fs.writeFile(rndIdsFile, data, function (err) {
        if (err) {
            emitter.emit('error', new Error('could not save data to file'));
            throw err;
        } else {
            emitter.emit('data', template('action', { name: 'finished saving to file', shizzle: rndIdsFile + ' ' + noOfIds + ' ids'}, true));
        }
    });

    emitter.emit('end');
};

module.exports = function (noOfIds, options) {
    options = options || {};

    var emitter = new Emitter;

    var workingFolder  = process.cwd();

    // check if rnd ids file exists first
    fileExists(path.resolve(path.join(workingFolder, rndIdsFile)), function (exists) {
        if (exists) {
            inquirer.prompt([
                {
                    type: 'confirm',
                    name: 'overWriteFile',
                    message: 'The rnd ids file already exists, do you want to overwrite?',
                    default: false
                }
            ], function (answers) {
                if (answers.overWriteFile) {
                    generator(emitter, noOfIds, options);
                } else {
                    return emitter.emit('error', new Error('the rnd ids file ' + rndIdsFile + ' already exists'));
                }
            });
        } else {
            generator(emitter, noOfIds, options);
        }
    });

    return emitter;
};

module.exports.line = function (argv) {
    var options = nopt(optionTypes, shorthand, argv);
    var noOfIds = options.argv.remain.slice(1);

    if (options.help || noOfIds.length < 1) return help('generate-id');

    if (options.help) return help('generate-id');

    return module.exports(noOfIds[0], options);
};

module.exports.completion = function (opts, cb) {
    return cb(null, Object.keys(require('../commands')));
};
