var Emitter  = require('events').EventEmitter;
var nopt     = require('nopt');
var path     = require('path');
var fs       = require('fs');
var fileExists  = require('../util/file-exists');

var template = require('../util/template');
var help     = require('./help');


var optionTypes = { help: Boolean, overwrite: Boolean, initcategorynames: Boolean };
var shorthand   = { 'h': ['--help'], 'o': ['--overwrite'], 'icn': ['--initcategorynames'] };

var dataSources = {
    ddf: 'mrDataFileDsc',
    dzf: 'mrDataFileDsc',
    csv: 'mrCsvDsc',
    sav: 'mrSavDsc'
};

function buildDMSScript(InputDataFile, options) {
    var dmsScript, dmsOutputOptions = '';

    if (options.overwrite) { dmsOutputOptions = 'MR Init Overwrite=1;'; }
    if (options.initcategorynames) { dmsOutputOptions += 'MR Init Category Names=1;'; }

    dmsScript = 'InputDatasource(Input, "Input DataSource")' + '\n';
    dmsScript += '  ConnectionString = "Provider=mrOleDB.Provider.2; Data Source = ' + dataSources[options.from] + '; Location = ' + InputDataFile + '.' + options.from.toString() + '; Initial Catalog = ' + InputDataFile + '.mdd"' + '\n';
    dmsScript += 'End InputDatasource' + '\n';

    dmsScript += 'OutputDatasource(Output, "Output DataSource")' + '\n';
    dmsScript += '  ConnectionString = "Provider=mrOleDB.Provider.2; Data Source = ' + dataSources[options.to] + '; Location = ' + InputDataFile + '.' + options.to + ';' + dmsOutputOptions + '"' + '\n';
    dmsScript += 'End OutputDatasource' + '\n';

    return dmsScript;
}

module.exports = function (convArgs, options) {
    options = options || {};

    var emitter = new Emitter;

    var workingFolder  = process.cwd();
    var inputDataFile  = convArgs[0];
    var dataFileFolder = path.dirname(path.resolve(path.join(workingFolder, inputDataFile)));

    fileExists(path.resolve(path.join(workingFolder, inputDataFile)), function (exists) {
        if (!exists) {
            return emitter.emit('error', new Error('the input file ' + convArgs[0] + ' doesn`t exist'));
        } else if (!dataSources.hasOwnProperty(convArgs[1].toLowerCase())) {
            return emitter.emit('error', new Error('the output database format ' + convArgs[1] + ' is not supported or doesn`t exist'));
        } else {
            var dmsScriptOptions = {
                from: path.extname(inputDataFile).replace('.', ''),
                to:   convArgs[1].toLowerCase(),
                overwrite: options.overwrite,
                initcategorynames: options.initcategorynames
            };

            if (fs.existsSync(path.resolve(path.join(workingFolder, path.basename(inputDataFile, '.' + dmsScriptOptions.from) + '.' + dmsScriptOptions.to))) && !options.overwrite) {
                return emitter.emit('error', new Error('the output database already exists, use --overwrite to overwrite the file'));
            }

            var dmsScript = buildDMSScript(path.basename(inputDataFile, '.' + dmsScriptOptions.from), dmsScriptOptions);

            fs.writeFileSync(path.join(dataFileFolder, 'DDF2CSV.dms'), dmsScript, {encoding: 'UTF-8'});

            var spawn   = require('child_process').spawn,
                dmsRun  = spawn('dmsRun', [path.resolve(path.join(dataFileFolder, 'DDF2CSV.dms'))]);

            dmsRun.stdout.on('data', function (data) {
                data = data.toString();
                if (data !== '.') emitter.emit('data', data);
            });

            dmsRun.stderr.on('data', function (data) {
                return emitter.emit('error', new Error(data));
            });

            dmsRun.on('exit', function (code) {
                //console.log('child process exited with code ' + code);

                // delete created DMS file after proceessing is done
                fs.unlink(path.join(dataFileFolder, 'DDF2CSV.dms'), function (err) {
                    if (err) throw err;
                });

                // data conversion is don
                emitter.emit('data', template('action', { name: 'converted', shizzle: inputDataFile + ' to ' + path.basename(inputDataFile, '.' + dmsScriptOptions.from) + '.' + dmsScriptOptions.to}, true));
                emitter.emit('end', '\n');
            });
        }
    });

    return emitter;
};

module.exports.line = function (argv) {
    var options  = nopt(optionTypes, shorthand, argv);
    var convArgs = options.argv.remain.slice(1);

    if (options.help || convArgs.length !== 2) return help('convert-db');

    return module.exports(convArgs, options);
};

module.exports.completion = function (opts, cb) {
    fs.readdir(process.cwd(), function (err, files) {
        // ignore ENOENT, no files
        if (err && err.code === 'ENOENT') return cb(null, []);
        cb(err, files);
    });
};

module.exports.completion.options = shorthand;
